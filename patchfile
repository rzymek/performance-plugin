From 8cf0d2fcff1a0df6496e9a56a4c320012cc6eb70 Mon Sep 17 00:00:00 2001
From: phoenix384 <phoenix384@gmx.de>
Date: Thu, 6 Aug 2015 16:35:56 +0200
Subject: [PATCH 1/2] Fix conversion failure with locale using comma as decimal
 separator

---
 src/main/java/hudson/plugins/performance/AbstractReport.java | 2 --
 1 file changed, 2 deletions(-)

diff --git a/src/main/java/hudson/plugins/performance/AbstractReport.java b/src/main/java/hudson/plugins/performance/AbstractReport.java
index 82f442b..d53b39b 100644
--- a/src/main/java/hudson/plugins/performance/AbstractReport.java
+++ b/src/main/java/hudson/plugins/performance/AbstractReport.java
@@ -13,7 +13,6 @@
 
   protected final DecimalFormat percentFormat;
   protected final DecimalFormat dataFormat; // three decimals
-  protected final DecimalFormat twoDForm; // two decimals
 
   abstract public int countErrors();
 
@@ -24,7 +23,6 @@ public AbstractReport() {
 
     percentFormat = new DecimalFormat("0.0", DecimalFormatSymbols.getInstance( useThisLocale ));
     dataFormat = new DecimalFormat("#,###", DecimalFormatSymbols.getInstance( useThisLocale ));
-    twoDForm = new DecimalFormat("#.##", DecimalFormatSymbols.getInstance( useThisLocale ));
   }
 
   public String errorPercentFormated() {

From ac55ebdb8b17b30e912dfe2b1e8fd89c17c74773 Mon Sep 17 00:00:00 2001
From: phoenix384 <phoenix384@gmx.de>
Date: Thu, 6 Aug 2015 16:41:46 +0200
Subject: [PATCH 2/2] Fix conversion failure with locale using comma as decimal
 separator

---
 src/main/java/hudson/plugins/performance/PerformanceReport.java | 9 +++++----
 1 file changed, 5 insertions(+), 4 deletions(-)

diff --git a/src/main/java/hudson/plugins/performance/PerformanceReport.java b/src/main/java/hudson/plugins/performance/PerformanceReport.java
index 728483b..dfa2ef3 100644
--- a/src/main/java/hudson/plugins/performance/PerformanceReport.java
+++ b/src/main/java/hudson/plugins/performance/PerformanceReport.java
@@ -4,7 +4,8 @@
 
 import java.io.IOException;
 import java.io.Serializable;
-import java.text.DecimalFormat;
+import java.math.BigDecimal;
+import java.math.RoundingMode;
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.LinkedHashMap;
@@ -321,8 +322,8 @@ public boolean ifSummarizerParserUsed(String filename) {
   }
 
   private double roundTwoDecimals(double d) {
-    synchronized (twoDForm) {
-      return Double.valueOf(twoDForm.format(d));
-    }
+    BigDecimal bd = new BigDecimal(d);
+	bd = bd.setScale(2, RoundingMode.HALF_UP);
+	return bd.doubleValue();
   }
 }
